기반 기술 : docker, kub, AWS EKS
관련 도구 : Terraform, ECR, k9s, lens, kubectx, karpenter, kubecost, fluenbit 등
GitOps : helm, github, github action, ArgoCD

컨테이너 : 애플리케이션 레벨에서 필요한 소스 코드, 라이브러리 등 모든 파일을 하나의 런타임 환경으로 패키징하는 기술

    namespace - 컨테이너에 대한 격리 계층을 제공
    cgroup - 애플리케이션을 특정 리소스 사용 세트(cpu, 메모리, ...)로 제한

    장점
        - 표준화에 따른 이식성 : OS 플랫폼 간 및 클라우드 간 이식 가능
        - 경량화 및 민첩성 : 일반 가상화에 비해 가벼워 더 빠른 빌드 가능
        - 신속한 확장성 : 같은 인프라에 더 많은 컨테이너 지원 가능 / 신속한 스케일링 지원

    AWS 상 컨테이너 관련 서비스 [ ECS, Copilot, EKS, Fargate, AppRunner, ECR, AppMesh, Cloudmap ]


도커 : 컨테이너 가상실행 환경을 제공해주는 대표적인 오픈소스 플랫폼
    
    Image : 컨테이너를 정의하는 읽기 전용 템플릿
    Dockerfile : 도커 이미지를 생성하기 위한 명세서

    docker pull [OPTIONS] NAME[:TAG|@DIGEST] : 도커 컨테이너 이미지 가져오기

    docker run [OPTIONS] [이미지 이름 or 이미지 ID] [실행할 파일]
        -p : 포트 지정 [8080:80]
        -d : 백그라운드 실행
    docker ps [OPTIONS]
    docker inspect [OPTIONS] NAME|ID [NAME|ID]

    docker stop [OPTIONS] CONTAINER
    docker rm [OPTIONS] CONTAINER

    docker image build [OPTIONS] PAHT | URL | - : 도커 이미지 빌드

    docker login
    docker push [옵션] NAME[:TAG]